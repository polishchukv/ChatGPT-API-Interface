GPT Model: 4o
--------------------
User: If I have online documentation that I'd like to share with you for the purposes of helping me troubleshoot code, but it is broken up into many pages and subpages, is there any way I can create a PDF that encompasses EVERYTHING?

----------------------------------------------------------------------------------------------------
AI: Creating a comprehensive PDF from online documentation that spans multiple pages and subpages can be achieved through a few different methods, depending on the structure of the website and your technical comfort level. Here are some approaches you can consider:

1. **Using a Web Page to PDF Converter:**
   - Some websites offer tools that can convert entire websites or series of links into a single PDF. Services like PrintFriendly or Web2PDF might allow you to enter URLs and generate PDFs.
   - However, these services often work best with simpler sites and may not crawl and convert content that requires JavaScript or complex navigation.

2. **Browser Extensions:**
   - Extensions like "Save as PDF" or "PDF Mage" for Chrome and Firefox can help generate PDFs from web pages. These might not always handle multi-page sites well but could be useful for smaller documentation.
   - Some extensions allow for the selection of multiple links for simultaneous conversion.

3. **Manually Compile PDFs:**
   - Open each page individually and use your browser’s in-built "Print to PDF" functionality (usually available in the print menu – `Ctrl + P` or `Cmd + P`). This can be tedious but ensures you capture exactly what you need.
   - You can then merge these individual PDFs using a tool like Adobe Acrobat, PDFsam, or an online service like Smallpdf or ILovePDF.

4. **Web Scraping (Advanced):**
   - If you're comfortable with programming, you could write a script in Python using libraries like BeautifulSoup and pdfkit to scrape the site and convert pages into PDFs.
   - This method requires more setup and technical knowledge, as you'll need to handle web requests and HTML conversion.

5. **Using Documentation Generators:**
   - Some online documentation might provide their documentation in other formats or offer API endpoints. Check if the documentation website provides a downloadable PDF version.
   - Alternatively, see if the documentation is open source or publicly available on platforms like GitHub. You might be able to clone the repository and generate the documentation locally using tools the project provides.

6. **Contact the Maintainers:**
   - If documentation is critical and complex, consider reaching out to the site maintainers. They might have already compiled a PDF or might be able to suggest better ways to access their content.

Before proceeding with any method, ensure you're complying with the terms of service and copyright restrictions of the website you're working with.
----------------------------------------------------------------------------------------------------
User: If I am defining a function in python, and I want a variable being passed in to have a default value unless another is provided, how do I do this?

----------------------------------------------------------------------------------------------------
AI: In Python, you can define default values for function parameters directly in the function signature. This allows you to specify a default value for a parameter that will be used if no argument is provided for that parameter when the function is called. Here’s how you can do it:

```python
def my_function(parameter_with_default=default_value):
    # Function implementation here
    print(parameter_with_default)

# Usage examples
my_function()  # Will print 'default_value'
my_function('another_value')  # Will print 'another_value'
```
Here's a complete example:

```python
def greet(name='World'):
    print(f'Hello, {name}!')

# Function calls
greet()               # Prints "Hello, World!" since no argument is passed
greet('Alice')        # Prints "Hello, Alice!" since 'Alice' is provided as an argument
```

### Key Points:
- Default values are specified by assigning a value to the parameter in the function definition.
- Parameters with default values should be listed after any parameters without default values. This means required parameters come first.
- Default parameter expressions are evaluated once when the function is defined, not each time the function is called.

You can have multiple default parameters:

```python
def example_function(a, b=10, c=20):
    print(f"a: {a}, b: {b}, c: {c}")

example_function(1)          # Outputs: a: 1, b: 10, c: 20
example_function(1, 2)       # Outputs: a: 1, b: 2, c: 20
example_function(1, 2, 3)    # Outputs: a: 1, b: 2, c: 3
```

In these examples, if you do not provide a value for `b` or `c`, the function will use the default values specified in its definition.
----------------------------------------------------------------------------------------------------
User: Can you decipher this for me? Python and GraphQL, for context.

```python
        'query': 'query get_finding_by_id($id: ID!) { finding(id: $id) { id id_int finding_id last_reported_time cloud_provider original_status discovered_time cloud_account package_name datasource { friendly_name } main_resource { resource_name } title finding_score { score severity original_score } age description }}',
```

I get that this is part of a request, and query is specified to be the word query plus the api query name (get_finding_by_id), but what is ($id: ID!) and { finding(id: $id) and {id id_int finding_id...}}?

----------------------------------------------------------------------------------------------------
AI: In the context of GraphQL, the snippet you've provided is part of a GraphQL query string written in Python. Let's break it down:

### GraphQL Query Structure

1. **`query get_finding_by_id`**:
   - This specifies a named query called `get_finding_by_id`. Naming a query is optional but useful for debugging and server-side logging.

2. **`($id: ID!)`**:
   - This part is defining a variable for the query. In GraphQL, you can use variables to pass dynamic values into a query, making it more flexible and reusable.
   - Here, `$id` is a variable that is expected to be provided when this query is executed.
   - `ID!` indicates that this variable should be of type `ID`, which is a scalar type representing a unique identifier, often used to refetch an object or as the key for a cache.
   - The `!` after `ID` means that this variable is non-nullable, which indicates that you must provide a value for `$id` when executing the query.

3. **`{ finding(id: $id) { ... } }`**:
   - This part is the body of the query.
   - `finding(id: $id)` is a field being queried on the GraphQL schema. It represents a request for a specific entity or information.
   - The `id: $id` part is an argument passed to the `finding` field, representing a filter or a specification for which finding to retrieve—the value of `$id` (passed by the client) will correspond to a specific finding in the system.

4. **`{ id id_int finding_id ...}`**:
   - These are the fields that you want to be returned in response to the query. They are specified within the curly braces following `finding(id: $id)`.
   - This is how GraphQL allows you to request precisely the data you need. Each field listed (e.g., `id`, `id_int`, `finding_id`, etc.) will determine what parts of the `finding` object you want to retrieve.
   - Nested fields, such as `datasource { friendly_name }` and `finding_score { score severity original_score }`, indicate that these are sub-objects, and specify the fields you want from these sub-objects.

### Summary

This GraphQL query is a structured request for retrieving a specific "finding" by its ID. The query includes details on what specific attributes of the "finding" you need, which helps ensure that you receive only the data you are interested in, thus optimizing network use and processing time.

In practice, to execute this query from Python, you would pass it to a GraphQL client along with any variables it needs (in this case, the `$id` variable), likely as part of an API call to a GraphQL endpoint.
----------------------------------------------------------------------------------------------------
User: How would you modify this to instead query for this:

scope_hierarchy
Query
Arguments
#
include_unscoped
Boolean

Response
#
Returns ScopeHierarchy.

----------------------------------------------------------------------------------------------------
AI: To modify the GraphQL query in order to query for `scope_hierarchy` and include the argument `include_unscoped` of type `Boolean`, you will need to change the query structure. Here’s how you can adjust the query accordingly:

```python
'query': '''
    query get_scope_hierarchy($includeUnscoped: Boolean) {
        scope_hierarchy(include_unscoped: $includeUnscoped) {
            # Assuming the fields you want to return from the ScopeHierarchy object
            # Sadly, without the actual schema we can only guess. Here's a plausible example:
            id
            name
            levels {
                level_name
                level_id
            }
            # Add the actual fields you need from the ScopeHierarchy
        }
    }
'''
```

### Explanation:

1. **`query get_scope_hierarchy($includeUnscoped: Boolean)`**:
   - The query is named `get_scope_hierarchy` for clarity.
   - It introduces a variable `$includeUnscoped` of type `Boolean`, which you can use to control whether or not to include unscoped data.
   - The absence of `!` means that `$includeUnscoped` is optional, so the client can choose whether to provide it when making the query.

2. **`scope_hierarchy(include_unscoped: $includeUnscoped)`**:
   - This part specifies the use of the `$includeUnscoped` variable as an argument for `include_unscoped` in the `scope_hierarchy` query.
   - Make sure to provide the value for `$includeUnscoped` when executing the query, typically sent along with the query in the JSON body of the request.

3. **Fields Inside `scope_hierarchy`**:
   - You need to list which specific fields you want the query to return from the `ScopeHierarchy` object. The example above uses `id`, `name`, and an array `levels` with `level_name` and `level_id`, but you should replace these with the actual desired fields based on your GraphQL schema.
   - If you're unsure which fields to include, check the documentation for the `ScopeHierarchy` type in your schema to ensure you're requesting valid fields.

Remember, if the schema includes specific types and fields for `ScopeHierarchy`, you need to replace these placeholders with the actual names and nested structures that your API supports.
----------------------------------------------------------------------------------------------------
User: Here's more of the code for context, does this change your answer?

```python
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': 'query get_finding_by_id($id: ID!) { finding(id: $id) { id id_int finding_id last_reported_time cloud_provider original_status discovered_time cloud_account package_name datasource { friendly_name } main_resource { resource_name } title finding_score { score severity original_score } age description }}',
        'query': 'query scope_hierarchy($includeUnscoped: Boolean) {scope_hierarchy(include_unscoped: $includeUnscoped)}'
        'variables': {'': finding_id},
    }
```

----------------------------------------------------------------------------------------------------
AI: Given the expanded context of your setup, it appears that you want to make a GraphQL request to an API with a query for `scope_hierarchy` and pass a variable for `includeUnscoped`. It looks like there’s potentially a small mistake in your code where two `query` keys are being defined in the `data` dictionary. Python dictionaries do not support duplicate keys, so only the last one will be retained, making the first query irrelevant in the `data` dictionary. 

### Here’s an Updated Version:

```python
url = 'https://api.us.seemplicity.io/api/v1'
headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {token}',
}

data = {
    'query': '''
        query get_scope_hierarchy($includeUnscoped: Boolean) {
            scope_hierarchy(include_unscoped: $includeUnscoped) {
                # Assuming the fields to be fetched from the ScopeHierarchy
                # Example fields:
                id
                name
                # Add additional fields as per your schema
            }
        }
    ''',
    'variables': {'includeUnscoped': True},  # or False, based on your requirement
}

# Assuming you will use this in an API call, e.g., with requests:
# response = requests.post(url, headers=headers, json=data)
# print(response.json())
```

### Important Points:

1. **Query Duplicates**: Ensure that only one `query` key is present in the `data` dictionary. Each dictionary key should be unique.

2. **Variables**: The `'variables': {'includeUnscoped': True}` part defines the variable used in the query. Adjust `True` to `False` if you want to exclude unscoped data based on your needs.

3. **Returned Fields**: Replace `id`, `name`, and any other example fields in the `scope_hierarchy` object with the actual fields you wish to retrieve, as specified by your GraphQL schema.

4. **API Call**: In this setup, you’ll typically use a library like `requests` to send this JSON data to the specified URL, including necessary headers. This action might already be part of your code logic.

This way, the setup will properly utilize the query with the `scope_hierarchy` field and `includeUnscoped` variable exactly as intended based on your API and schema specifications.
----------------------------------------------------------------------------------------------------
User: I got the following back:

```
2024-11-11 13:06:20,152 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 400 143
2024-11-11 13:06:20,152 - ERROR - Failed to access API, status code: 400
2024-11-11 13:06:20,166 - ERROR - Response content: {"errors":[{"message":"Field \"scope_hierarchy\" of type \"ScopeHierarchy\" must have a sub selection.","locations":[{"line":1,"column":51}]}]}
```

----------------------------------------------------------------------------------------------------
AI: The error message you received indicates that the `scope_hierarchy` field in your GraphQL query needs to have a sub-selection, meaning you should specify which specific fields you want to retrieve within the `scope_hierarchy` object. In GraphQL, simply specifying an object type or field that returns an object requires you to explicitly state which fields of that object you want to receive in the response.

### How to Fix This

Ensure that your query includes a sub-selection of fields from the `scope_hierarchy` object. Here’s an example of how you can modify the query:

```python
url = 'https://api.us.seemplicity.io/api/v1'
headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {token}',
}

data = {
    'query': '''
        query get_scope_hierarchy($includeUnscoped: Boolean) {
            scope_hierarchy(include_unscoped: $includeUnscoped) {
                # Sub-selection of fields in the scope_hierarchy object
                id
                name
                description
                # Add more fields as appropriate based on the API schema
            }
        }
    ''',
    'variables': {'includeUnscoped': True},  # or False, based on your use case
}

# Using this data in an API request as part of your application logic
```

### Steps Taken:
1. **Add a Sub-selection**: Inside the curly braces following `scope_hierarchy`, specify which fields you want to retrieve, like `id`, `name`, and any other relevant fields your GraphQL schema provides for `ScopeHierarchy`.

2. **Refer to the Schema**: If you're unsure about which fields are part of `ScopeHierarchy`, consult the API’s GraphQL schema documentation or introspect it if the API allows (using tools like GraphiQL).

3. **Review the Query**: Ensure there's no syntax error or incorrect field referenced. It should strictly comply with the schema provided by your backend.

By including the necessary fields in the selection set, your query should align with the requirements outlined in your GraphQL schema, thus avoiding the "must have a sub selection" error.
----------------------------------------------------------------------------------------------------
User: What if I don't know the schema for the sub-selection? Is there any way I can find it out?

----------------------------------------------------------------------------------------------------
AI: If you don't have access to the documentation for the GraphQL schema, there are several methods you can use to discover or introspect the schema:

### 1. Use GraphiQL or GraphQL Playground
- **GraphiQL** and **GraphQL Playground** are interactive development environments that allow you to explore a GraphQL API directly.
- If the API endpoint provides one of these interfaces, you can browse the available queries, mutations, and subscriptions as well as the types and fields they expose.
- These tools generally have an auto-complete feature that helps you discover available fields.

### 2. Schema Introspection
- GraphQL has built-in capabilities for introspection, which lets you query information about the types and fields available in the API.
- You can send a special introspection query to retrieve the entire schema and explore the types. Here’s a simple example of an introspection query:

```graphql
{
  __schema {
    types {
      name
      fields {
        name
        type {
          name
          kind
        }
      }
    }
  }
}
```

- You can run this query using a tool like `curl` or using Python’s `requests` library to see details about the schema.

### 3. Use GraphQL Client Libraries
- Libraries like Apollo Client (for JavaScript) or `gql` (for Python) often provide tools to introspect and fetch schema details programmatically.
- These tools can help automate the process of fetching and navigating the schema.

### 4. Check API Documentation
- Sometimes APIs are self-documented with user guides including schema details.
- APIs that follow good practices may offer downloadable schema files or examples of typical queries.

### 5. Contact API Maintainers
- If the schema isn't publicly documented but you have legitimate access, you might get in touch with the API provider or maintainers. They can often provide a copy of the schema or access to a sandbox environment.

### Running an Introspection Query in Python:

Here’s how you might use Python’s `requests` to perform an introspection query:

```python
import requests

url = 'https://api.us.seemplicity.io/api/v1'
headers = {
    'Content-Type': 'application/json',
    'Authorization': f'Bearer {token}',
}

introspection_query = '''
{
  __schema {
    queryType { name }
    mutationType { name }
    types {
      name
      fields {
        name
        type {
          name
          kind
        }
      }
    }
  }
}
'''

response = requests.post(url, headers=headers, json={'query': introspection_query})

if response.status_code == 200:
    schema_data = response.json()
    print(schema_data)
else:
    print(f"Failed to retrieve schema: {response.status_code}")
```

This should return a JSON object that includes all types and fields available in the schema, from which you can determine the fields available for `ScopeHierarchy`.
----------------------------------------------------------------------------------------------------
User: If I give you my full code, can you create a sample script that utilizes the GraphQL Client library I'm using to get the schema?

----------------------------------------------------------------------------------------------------
AI: Certainly! Please provide your full code, specifically the parts that show how you're using the GraphQL Client library. Once I have that information, I can help you create a sample script to introspect the schema using the same library.
----------------------------------------------------------------------------------------------------
User: ```python
import requests
import base64
import json
import logging
from dotenv import load_dotenv
import os

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Fetch API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')
if not api_key:
    logging.error("API_KEY environment variable is missing.")
else:
    logging.info("API_KEY successfully loaded.")
    logging.info(f"API_KEY: {api_key}")

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        logging.debug("Decoding API key.")
        cognito_data = base64.b64decode(api_key)
        logging.info(f"API_KEY_decoded: {cognito_data}")

        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        logging.info(f"Cognito URL: {cognito_url}")

        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}
        logging.debug("Cognito headers prepared.")

        logging.info("Sending request to Cognito service.")
        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            logging.info("Received successful response from Cognito service.")
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            logging.debug(f"Access token: {token}")
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            logging.error(f"Response content: {cognito_response.content.decode()}")
            return None

    except base64.binascii.Error as e:
        logging.error(f"Error decoding API key: {e}")
    except KeyError as e:
        logging.error(f"Error parsing token response: {e}")
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}")

def finding_query_by_id(token: str, finding_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': 'query get_finding_by_id($id: ID!) { finding(id: $id) { id id_int finding_id last_reported_time cloud_provider original_status discovered_time cloud_account package_name datasource { friendly_name } main_resource { resource_name } title finding_score { score severity original_score } age description }}',
        'variables': {'id': finding_id},
    }

    try:
        logging.info("Sending request to Seemplicity API.")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            logging.info("Received successful response from Seemplicity API.")
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

def scope_hierarchy(include_unscoped="False"):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': 'query scope_hierarchy($includeUnscoped: Boolean) {scope_hierarchy(include_unscoped: $includeUnscoped)}',
        'variables': {'include_unscoped': include_unscoped}
    }

    try:
        logging.info("Sending request to Seemplicity API.")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            logging.info("Received successful response from Seemplicity API.")
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

if api_key:
    token = get_token(api_key)
    if token:
        logging.info(f"Token obtained: {token}")

        api_response = scope_hierarchy()
        if api_response:
            logging.info(f"API response: {json.dumps(api_response, indent=2)}")
            logging.error("Failed to retrieve data from Seemplicity API.")
    else:
        logging.error("Failed to retrieve the token.")


'''# Usage
if api_key:
    token = get_token(api_key)
    if token:
        logging.info(f"Token obtained: {token}")

        # Replace finding_id w/ whatever finding it is you're trying to query
        finding_id = 'RmluZGluZzoxODAxNTA='
        api_response = finding_query_by_id(token, finding_id)
        if api_response:
            logging.info(f"API response: {json.dumps(api_response, indent=2)}")
        else:
            logging.error("Failed to retrieve data from Seemplicity API.")
    else:
        logging.error("Failed to retrieve the token.")'''
```

----------------------------------------------------------------------------------------------------
AI: Thank you for sharing the code. Based on what you've provided, you're using the `requests` library to interact with the GraphQL API. To introspect the GraphQL schema, we'll construct an introspection query using the same approach. Let's create a sample script to handle this introspection query, utilizing your existing setup:

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Fetch API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')
if not api_key:
    logging.error("API_KEY environment variable is missing.")
else:
    logging.info("API_KEY successfully loaded.")

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            return None

    except base64.binascii.Error as e:
        logging.error(f"Error decoding API key: {e}")
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}")

def execute_introspection_query(token: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }

    introspection_query = '''
    {
      __schema {
        queryType { name }
        mutationType { name }
        types {
          name
          fields {
            name
            type {
              name
              kind
            }
          }
        }
      }
    }
    '''

    try:
        logging.info("Sending introspection query to Seemplicity API.")
        response = requests.post(url, headers=headers, json={'query': introspection_query})
        
        if response.status_code == 200:
            logging.info("Received successful response for introspection.")
            schema = response.json()
            logging.info("Schema: ")
            logging.info(json.dumps(schema, indent=2))
            return schema
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

if api_key:
    token = get_token(api_key)
    if token:
        logging.info(f"Token obtained: {token}")
        schema_response = execute_introspection_query(token)
        if schema_response:
            logging.info("Successfully retrieved schema via introspection.")
        else:
            logging.error("Failed to retrieve schema from Seemplicity API.")
    else:
        logging.error("Failed to retrieve the token.")
```

### Key Changes and Additions:
- **Introspection Query**: This script uses a GraphQL introspection query to request details about the schema, which will include available types and fields.
- **API Request**: Just like your other API interactions, we send an HTTP POST request with this introspection query.
- **Logging**: Any success or failure is logged for easier debugging.

### Usage:
- Ensure your environment variable `.env` file contains a valid `API_KEY`.
- Run the script, and it will print the entire schema that your GraphQL API exposes.

This script should work similarly to how you are using the `requests` library in your existing code, simply aiming to introspect the schema instead of executing specific queries. Adjust fields or scopes as needed depending on the actual details of your GraphQL implementation.
----------------------------------------------------------------------------------------------------
User: Modify this code so that it saved the output to a JSON file in "C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work"

----------------------------------------------------------------------------------------------------
AI: Certainly! To save the introspection query's result to a JSON file, you'll write the schema data to a file in the specified directory. Here's how you can modify the code to accomplish this:

```python
import requests
import json
import logging
import os
import base64
from dotenv import load_dotenv

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(message)s')

# Directory to save the JSON output
output_directory = r"C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work"
output_file_path = os.path.join(output_directory, "schema_output.json")

# Fetch API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')
if not api_key:
    logging.error("API_KEY environment variable is missing.")
else:
    logging.info("API_KEY successfully loaded.")

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            return None

    except base64.binascii.Error as e:
        logging.error(f"Error decoding API key: {e}")
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}")

def execute_introspection_query(token: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }

    introspection_query = '''
    {
      __schema {
        queryType { name }
        mutationType { name }
        types {
          name
          fields {
            name
            type {
              name
              kind
            }
          }
        }
      }
    }
    '''

    try:
        logging.info("Sending introspection query to Seemplicity API.")
        response = requests.post(url, headers=headers, json={'query': introspection_query})
        
        if response.status_code == 200:
            logging.info("Received successful response for introspection.")
            schema = response.json()
            
            # Save the JSON response to a file
            with open(output_file_path, 'w', encoding='utf-8') as outfile:
                json.dump(schema, outfile, ensure_ascii=False, indent=2)
                
            logging.info(f"Schema successfully saved to {output_file_path}.")
            return schema
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

if api_key:
    token = get_token(api_key)
    if token:
        logging.info(f"Token obtained: {token}")
        schema_response = execute_introspection_query(token)
        if schema_response:
            logging.info("Successfully retrieved schema via introspection.")
        else:
            logging.error("Failed to retrieve schema from Seemplicity API.")
    else:
        logging.error("Failed to retrieve the token.")
```

### Key Modifications:
- **Output Directory and File Path**: The script specifies the `output_directory` and `output_file_path` to place the JSON file at `C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work\schema_output.json`.
- **Saving to JSON**: The JSON response from the introspection query is saved to a file using Python's `json.dump()`, with pretty-print formatting (2-space indentation).

### Usage:
Ensure that the script has the necessary permissions to write to the specified directory. If you are planning to run this script on a different system or in an environment where paths are handled differently, you might need to adjust the file path configuration.
----------------------------------------------------------------------------------------------------
User: I'm going to provide you the output .json and you can tell me what you find for scope_hierarchy and ScopeHierarchy. I took a look and they don't seem to have and fields?
```
{
  "data": {
    "__schema": {
      "queryType": {
        "name": "CustomerQuery"
      },
      "mutationType": {
        "name": "CustomerMutation"
      },
      "types": [
        {
          "name": "CustomerQuery",
          "fields": [
            {
              "name": "findings_view",
              "type": {
                "name": "PlainFindingsViewConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_findings_view",
              "type": {
                "name": "PlainActualFindingsModelConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_hierarchy",
              "type": {
                "name": "ScopeHierarchy",
                "kind": "OBJECT"
              }
            },
            {
              "name": "summary",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_filters",
              "type": {
                "name": "FindingFilterConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "PlainFindingsViewConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PageInfo",
          "fields": [
            {
              "name": "hasNextPage",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "hasPreviousPage",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "startCursor",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "endCursor",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Boolean",
          "fields": null
        },
        {
          "name": "String",
          "fields": null
        },
        {
          "name": "PlainFindingsViewEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "FindingsView",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingsView",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tickets",
              "type": {
                "name": "TicketsConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "datasource_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregated_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "open_aggregated_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation_sub_phase",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_email",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "FindingAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Int",
          "fields": null
        },
        {
          "name": "Float",
          "fields": null
        },
        {
          "name": "FindingScore",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalized_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scoring_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "factorized_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score_set_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score_updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scoring_rule",
              "type": {
                "name": "ScoringRule",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ID",
          "fields": null
        },
        {
          "name": "DateTime",
          "fields": null
        },
        {
          "name": "ScoringRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "method",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "reduction_factor",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fixed_value",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "priority",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "Node",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleMethods",
          "fields": null
        },
        {
          "name": "SelectionRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filtersid",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scopesid",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scope_group",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_group_model",
              "type": {
                "name": "ScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scoring_rules",
              "type": {
                "name": "ScoringRuleConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_preferences",
              "type": {
                "name": "SLAPreferenceConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_sla_preferences",
              "type": {
                "name": "TicketSLARuleConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "FindingFilter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_type",
              "type": {
                "name": "FindingFilterTypeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "popular",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "JSONString",
          "fields": null
        },
        {
          "name": "FindingFilterTypeEnum",
          "fields": null
        },
        {
          "name": "ScopeGroup",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "root",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileConnectedScopeGroupRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "group_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ScoringRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreferenceConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreferenceEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "SLAPreference",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreference",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filtersid",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scopesid",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_respond",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "group",
              "type": {
                "name": "SLAGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "SLAGroup",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "User",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "first_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "email",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "identity_provider_source",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_login",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "activity_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "saml_groups_from_last_login",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "username",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_access_groups",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_events",
              "type": {
                "name": "SystemEventConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "saml_group_profiles",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "UserNodePermissionNodes",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "saml_group_profiles",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "Role",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "saml_user_groups",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "number_of_users",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_login_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Profile",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Profile",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "saml_user_groups",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "scopes_editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "scope_groups",
              "type": {
                "name": "ScopeGroupConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scopes",
              "type": {
                "name": "FindingFilterConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "statuses",
              "type": {
                "name": "StatusConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "users",
              "type": {
                "name": "ProfileUserConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ProfileNodeRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "users",
              "type": {
                "name": "ProfileUserConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_groups",
              "type": {
                "name": "ScopeGroupConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ProfileUserConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUserEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ProfileUser",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUser",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "first_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "email",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "identity_provider_source",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_login",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "activity_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "saml_groups_from_last_login",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "username",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_access_groups",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_events",
              "type": {
                "name": "SystemEventConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileUserRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "IdentityProviderSource",
          "fields": null
        },
        {
          "name": "UserActivityStatus",
          "fields": null
        },
        {
          "name": "RemediationQueueActivityRecord",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "timestamp",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "entity_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "attribute",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "old_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "new_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_event_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "AuditRecordReasonEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_record",
              "type": {
                "name": "AuditRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "action",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "details",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "RemediationQueueActivityRecordNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_record",
              "type": {
                "name": "AuditRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "action",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "details",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Ticket",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_endpoint_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_close",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_reopen",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "assignee",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sprint",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sync_attachments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_attachment_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_status_update_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_remaining_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_mapping",
              "type": {
                "name": "FieldMapping",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "duedate",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketStatusEnum",
          "fields": null
        },
        {
          "name": "FieldMappingDefinition",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "keys",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "column_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "internal_to_external_status_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_to_internal_status_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "webhook_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "EndpointType",
                "kind": "ENUM"
              }
            },
            {
              "name": "manager_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketProvider",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "known_identifier",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_identifier",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "oauth_client_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "webhook_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_installed",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "change_status_allowed",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "instructions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "configuration",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "display",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_internal",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketProviderTypeEnum",
          "fields": null
        },
        {
          "name": "Instruction",
          "fields": [
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "link_text",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "EndpointType",
          "fields": null
        },
        {
          "name": "FieldMapping",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "value_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_favorite",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aligned_to_default",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AuditRecord",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "timestamp",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "entity_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "attribute",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "old_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "new_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_event_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "AuditRecordReasonEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_event",
              "type": {
                "name": "SystemEvent",
                "kind": "OBJECT"
              }
            },
            {
              "name": "entity_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_exists",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "old_value_object",
              "type": {
                "name": "ExtendedAuditValue",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_value_object",
              "type": {
                "name": "ExtendedAuditValue",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "UserType",
          "fields": null
        },
        {
          "name": "AuditRecordReasonEnum",
          "fields": null
        },
        {
          "name": "SystemEvent",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "system_event_definition_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "parameters",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "creating_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "NodeIntId",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ExtendedAuditValue",
          "fields": [
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "display",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "duration",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SystemEventConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SystemEventEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "SystemEvent",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUserSortEnum",
          "fields": null
        },
        {
          "name": "ScopeGroupConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScopeGroupEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScopeGroupSortEnum",
          "fields": null
        },
        {
          "name": "FindingFilterConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingFilterEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "StatusConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "StatusEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Status",
          "fields": [
            {
              "name": "key",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "StatusCategoryEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "sub_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "StatusTypeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_extended",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "updated_by_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "StatusCategoryEnum",
          "fields": null
        },
        {
          "name": "StatusTypeEnum",
          "fields": null
        },
        {
          "name": "ProfileSortEnum",
          "fields": null
        },
        {
          "name": "ProfileAndSAMLGroupObject",
          "fields": [
            {
              "name": "saml_group",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "profile",
              "type": {
                "name": "Profile",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "TicketSLARuleConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketSLARuleEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "TicketSLARule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketSLARule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_respond",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "StatusType",
          "fields": [
            {
              "name": "key",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Datasource",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definitions_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "integration_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required_fields_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "secret_configuration_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "deleted",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_received_finding",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_check_connection_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "check_connection_status",
              "type": {
                "name": "DatasourceCheckConnectionStatusEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "has_link",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_comments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cron",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definition",
              "type": {
                "name": "DatasourceDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "collection_state",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collection_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rap_instance_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "days_not_seen_to_declare_fixed",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_collected_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_reported_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "secrets_hints",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "DatasourceCheckConnectionStatusEnum",
          "fields": null
        },
        {
          "name": "DatasourceDefinition",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "instructions",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required_fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "secret_configuration",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_check_connection",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sections",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "source_display_name",
              "type": {
                "name": "SourceDisplayName",
                "kind": "OBJECT"
              }
            },
            {
              "name": "filters",
              "type": {
                "name": "FiltersConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_received_finding",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_rapable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_collected_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_last_collected_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_reported_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_last_reported_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Section",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_collapsable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Row",
          "fields": [
            {
              "name": "fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FieldInput",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_string_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_input_type",
              "type": {
                "name": "FieldTypesEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Options",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "query_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "hidden",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_multi",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "skeleton",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_primary",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "descendants",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "precedents",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "field_input_size",
              "type": {
                "name": "FieldSizeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "mapping_data",
              "type": {
                "name": "MappingData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "label_right",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "min_value",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "max_value",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FieldTypesEnum",
          "fields": null
        },
        {
          "name": "Options",
          "fields": [
            {
              "name": "is_createable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_creatable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "switch_cases",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "KeyValuePair",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Case",
          "fields": [
            {
              "name": "label",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FieldSizeEnum",
          "fields": null
        },
        {
          "name": "MappingData",
          "fields": [
            {
              "name": "columns",
              "type": {
                "name": "MapperColumn",
                "kind": "OBJECT"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "MapperColumn",
          "fields": [
            {
              "name": "field_from",
              "type": {
                "name": "MapperColumnField",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_to",
              "type": {
                "name": "MapperColumnField",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "MapperColumnField",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "MapperRow",
          "fields": [
            {
              "name": "field_from",
              "type": {
                "name": "MapperRowField",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_to",
              "type": {
                "name": "MapperRowField",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "MapperRowField",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_string_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_input_type",
              "type": {
                "name": "FieldTypesEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Options",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "query_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "hidden",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_multi",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "skeleton",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_primary",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SourceDisplayName",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FiltersConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FiltersEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Filter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Filter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tree",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definitions_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketsConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketsEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "TicketNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_endpoint_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_close",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_reopen",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "assignee",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sprint",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sync_attachments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_attachment_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_status_update_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_remaining_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_mapping",
              "type": {
                "name": "FieldMapping",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "remediation_queue_title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_assignee_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingAdditionalData",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cve",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cwe",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FiltersConfigInput",
          "fields": null
        },
        {
          "name": "FindingsViewSortEnum",
          "fields": null
        },
        {
          "name": "PlainActualFindingsModelConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsModelEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "PlainActualFindingsView",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsView",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "datasource_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_email",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "FindingAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsViewSortEnum",
          "fields": null
        },
        {
          "name": "Finding",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_reported_not_exist",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_group_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "package_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "image_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scan_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "reopen_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "closing_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "meta",
              "type": {
                "name": "FindingMetadata",
                "kind": "OBJECT"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tickets",
              "type": {
                "name": "TicketConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "comments",
              "type": {
                "name": "CommentConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "aggregation_group",
              "type": {
                "name": "AggregationGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "findings_additional_data",
              "type": {
                "name": "FindingsAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "attachments",
              "type": {
                "name": "AttachmentConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_preference",
              "type": {
                "name": "SLAPreference",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "seem_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "manual_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "name": "FindingDynamicData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "main_resource",
              "type": {
                "name": "PlainResourceNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "raw2",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_raw",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "seem_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "manual_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "name": "FindingDynamicData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource",
              "type": {
                "name": "PlainResourceNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "raw2",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_raw",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingDynamicData",
          "fields": [
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "comments",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DatasourceComment",
          "fields": [
            {
              "name": "body",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainResourceNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "uuid",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "r1_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r1_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r1_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "tags_key_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_key_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "last_seen",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "first_seen",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "critical_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingMetadata",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalizer_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "collection_service_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalized_file",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "collected_file",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enrichment_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "TicketConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "CommentConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "CommentEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Comment",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Comment",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "body",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_modified",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "AggregationGroup",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aggregation_rule_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "main_finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "open_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_locked",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_identifier",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_rule",
              "type": {
                "name": "AggregationRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "main_finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "findings",
              "type": {
                "name": "FindingConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AggregationRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "order",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aggregation_query",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_calculation",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "version",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_successful_run",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_number_of_generated_groups",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "customer_description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "internal_description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_rule_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings_amount_before_aggregation",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter",
              "type": {
                "name": "AggregationFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope",
              "type": {
                "name": "AggregationFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AggregationRuleType",
          "fields": null
        },
        {
          "name": "AggregationFilter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingSortEnum",
          "fields": null
        },
        {
          "name": "FindingsAdditionalData",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "original_finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "engines",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cve",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cwe",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "epss_percentile",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fixed_versions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "vulnerable_versions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "scanner",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "product",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "package",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "package_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "plugin_text",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "contributers",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "file_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "publication_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "line",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "length",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "method",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "branch",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "project_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sink_node",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_public",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "operating_system",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_exploit",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "result",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resolution_reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "detailed_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_fixable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "exploit_maturity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cisa_kev",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remote_code_execution",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v3_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v3_vector",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v2_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v2_temporal_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tenable_severity_score",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "vulnerability_reported_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "repository_link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "url",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_duplicated",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "vulncheck_kev",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_extra_identifiers",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "locations",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "epss_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "traceable_detection_type",
              "type": {
                "name": "TraceableDetectionType",
                "kind": "ENUM"
              }
            },
            {
              "name": "critical_assets_at_risk",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "choke_points",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "affected_entities",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "attack_complexity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "malware_kit_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "prettify",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TraceableDetectionType",
          "fields": null
        },
        {
          "name": "AttachmentConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "AttachmentEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Attachment",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Attachment",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "uploaded_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "key",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "size",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "synced_to_ticket",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ScopeHierarchy",
          "fields": [
            {
              "name": "scope_hierarchy",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SummaryAPIS",
          "fields": null
        },
        {
          "name": "AggregateFunctions",
          "fields": null
        },
        {
          "name": "RoundFunctions",
          "fields": null
        },
        {
          "name": "FindingFilterFilter",
          "fields": null
        },
        {
          "name": "FindingFilterSortEnum",
          "fields": null
        },
        {
          "name": "CustomerMutation",
          "fields": [
            {
              "name": "new_finding_scope_v2",
              "type": {
                "name": "NewFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_scope_v2",
              "type": {
                "name": "UpdateFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_scope_v2",
              "type": {
                "name": "DeleteFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "create_scope_group",
              "type": {
                "name": "CreateScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "edit_scope_group",
              "type": {
                "name": "EditScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_scope_group",
              "type": {
                "name": "DeleteScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_finding_filter",
              "type": {
                "name": "NewFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_filter",
              "type": {
                "name": "UpdateFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_filter",
              "type": {
                "name": "DeleteFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_finding_scope",
              "type": {
                "name": "NewFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_scope",
              "type": {
                "name": "UpdateFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_scope",
              "type": {
                "name": "DeleteFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "add_manual_findings",
              "type": {
                "name": "ManualFindings",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "NewFindingScopeV2",
          "fields": [
            {
              "name": "finding_filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "FindingFilterInput",
          "fields": null
        },
        {
          "name": "UpdateFindingScopeV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteFindingScopeV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "CreateScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "EditScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "NewFindingFilterV2",
          "fields": [
            {
              "name": "finding_filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "UpdateFindingFilterV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteFindingFilterV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ManualFindings",
          "fields": [
            {
              "name": "findings",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "AddManualFindingResult",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ManualFindingInput",
          "fields": null
        },
        {
          "name": "RemediationInput",
          "fields": null
        },
        {
          "name": "ManualResourceInput",
          "fields": null
        },
        {
          "name": "__Schema",
          "fields": [
            {
              "name": "types",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "queryType",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "mutationType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            },
            {
              "name": "subscriptionType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            },
            {
              "name": "directives",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "__Type",
          "fields": [
            {
              "name": "kind",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "interfaces",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "possibleTypes",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "enumValues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "inputFields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "ofType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "__TypeKind",
          "fields": null
        },
        {
          "name": "__Field",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "args",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "isDeprecated",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "deprecationReason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__InputValue",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "defaultValue",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__EnumValue",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "isDeprecated",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "deprecationReason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__Directive",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "locations",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "args",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "__DirectiveLocation",
          "fields": null
        }
      ]
    }
  }
}
```

----------------------------------------------------------------------------------------------------
AI: From the JSON you provided, focusing on the `scope_hierarchy` and `ScopeHierarchy`, here's what we can derive:

### `scope_hierarchy` Field
- The field `scope_hierarchy` is defined under the `CustomerQuery` type.
- It is of type `ScopeHierarchy`.

### `ScopeHierarchy` Type
- The `ScopeHierarchy` type itself has one field:
  - `scope_hierarchy`: This field is of type `JSONString`, which is likely a custom scalar type meant to represent JSON data as a string.

### Analysis & Implications
- The `ScopeHierarchy` object does not list multiple discrete fields typically found in more detailed GraphQL objects. Instead, it only has a single field named `scope_hierarchy` of scalar type `JSONString`.
- This suggests that the data returned by `scope_hierarchy` could be JSON data encapsulated as a string, potentially providing a nested or complex structure in JSON format rather than as individual GraphQL fields.

### Next Steps
To properly understand the content and structure of `scope_hierarchy`, consider these steps:

1. **Query `scope_hierarchy` to Retrieve JSON Data**: Execute a query against the `scope_hierarchy` endpoint to see the format of the actual JSON data returned.

```graphql
query getScopeHierarchy($includeUnscoped: Boolean) {
    scope_hierarchy(include_unscoped: $includeUnscoped) {
        scope_hierarchy
    }
}
```

2. **Inspect the JSON Output**: Once you run the query, inspect the JSON string returned in the `scope_hierarchy` field. This will reveal the structure and nested fields available within that JSON payload.

3. **Adjust Your Application Logic**: Based on the JSON data's structure, adjust your application logic to parse and utilize this information effectively.

By following these steps, you can further explore the nature of the information returned by `scope_hierarchy` and how it fits into your use case. If the JSON structure is complex, it might require additional parsing logic in your Python code.
----------------------------------------------------------------------------------------------------
User: Update the test script code you created with suggestion #1 (execute a query against the scope_hierarchy endpoint...) so that I can run it

----------------------------------------------------------------------------------------------------
AI: Certainly! Let's update the test script to include a query against the `scope_hierarchy` endpoint to retrieve the JSON data stored in the `scope_hierarchy` field. This script will perform the query and print out the result so you can inspect it.

Here’s the updated script:

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Fetch API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')
if not api_key:
    logging.error("API_KEY environment variable is missing.")
else:
    logging.info("API_KEY successfully loaded.")

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            return None

    except base64.binascii.Error as e:
        logging.error(f"Error decoding API key: {e}")
    except requests.exceptions.RequestException as e:
        logging.error(f"Request failed: {e}")

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        logging.info("Sending request to Seemplicity API for scope hierarchy.")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            logging.info("Received successful response from Seemplicity API.")
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

if api_key:
    token = get_token(api_key)
    if token:
        logging.info(f"Token obtained: {token}")
        
        # Fetch the scope hierarchy
        api_response = fetch_scope_hierarchy(token)
        if api_response:
            # Print the formatted JSON response for inspection
            logging.info("Scope Hierarchy JSON Response:")
            logging.info(json.dumps(api_response, indent=2))
        else:
            logging.error("Failed to retrieve scope hierarchy from Seemplicity API.")
    else:
        logging.error("Failed to retrieve the token.")
```

### Key Points:
- **Scope Hierarchy Query**: This script now includes a query to fetch the `scope_hierarchy` from your API.
- **Token Retrieval**: Ensures the token is fetched from your authentication setup before attempting to query the GraphQL API.
- **Response Handling**: The JSON response from the query is printed in a formatted manner, so you can easily inspect the `scope_hierarchy` field's content.

### Usage:
- Ensure the `.env` file contains your `API_KEY` for authentication.
- Run the script to make the API call and inspect the printed JSON to understand the data structure returned by the `scope_hierarchy`.
----------------------------------------------------------------------------------------------------
User: What I got back was the following, repeating for all the thousands of scopes we have. Help me understand it, and then tell me how I should apply it back within my previous code so that my scope_hierarchy query works.

```
"scope_hierarchy": "[{\"type\": \"root\", \"id\": \"U2NvcGVHcm91cDox\", \"name\": \"Paramount\", \"editable\": false, \"created_by\": null, \"children\":
```

For reference, here is the query we need to make work:
```python
def scope_hierarchy(include_unscoped="False"):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': 'query scope_hierarchy($includeUnscoped: Boolean) {scope_hierarchy(include_unscoped: $includeUnscoped)}',
        'variables': {'include_unscoped': include_unscoped}
    }

    try:
        logging.info("Sending request to Seemplicity API.")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            logging.info("Received successful response from Seemplicity API.")
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
```

----------------------------------------------------------------------------------------------------
AI: The response you received indicates that `scope_hierarchy` returns a JSON string representing a possibly complex hierarchy of scopes, where each scope has attributes like `type`, `id`, `name`, `editable`, `created_by`, and potentially a `children` array representing nested scopes. Here's how you can understand and effectively handle this response:

### Understanding the Response

1. **JSON String Encoding**: The `scope_hierarchy` field contains a JSON string. This means that the JSON data is encoded as a string, which you'll need to parse to work with it further.

2. **Structure**: From your snippet, each scope object appears to have these basic fields:
   - `type`: Indicates the type of the scope (e.g., "root").
   - `id`: A unique identifier for the scope.
   - `name`: The name of the scope.
   - `editable`: A boolean indicating if the scope can be edited.
   - `created_by`: Information about who created the scope (could be `null` for root).
   - `children`: A potential list of nested scopes, which might also have similar attributes.

3. **Parsing Required**: The response is a JSON string; thus, you must parse this string back into JSON objects to work with the hierarchical data structure in your application logic.

### How to Modify your Code

Here's how you can update your function to properly parse and return the embedded JSON objects in a usable form:

```python
def scope_hierarchy(include_unscoped=False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query scope_hierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        logging.info("Sending request to Seemplicity API.")
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            logging.info("Received successful response from Seemplicity API.")
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                # Parse the JSON string into a Python list or dictionary
                scope_data = json.loads(scope_json_str)
                return scope_data
            else:
                logging.error("Unexpected response structure.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
```

### Key Changes:

1. **Variable Typing**: Changed `include_unscoped` to a boolean `False` to align with how you want to use it in your query variable.

2. **Parsing the JSON String**: Use `json.loads()` to parse the `scope_hierarchy` JSON string into Python objects, allowing you to interact with it as a list of dictionaries (or potentially nested lists).

3. **Handling Nested Data**: After parsing, `scope_data` will contain the entire hierarchy. You can then manipulate or iterate over these data structures to extract the scopes you are interested in, possibly accounting for nested `children`.

### Application Logic:

Once you have the data in `scope_data`, consider the specific logic of what you want to do with these scopes — whether it's rendering them, filtering them, or applying some business logic. Adjust your Python code accordingly to interact with this data.
----------------------------------------------------------------------------------------------------
User: Good, it is working. Now, as a refresher, this is the output of all schema:
```
{
  "data": {
    "__schema": {
      "queryType": {
        "name": "CustomerQuery"
      },
      "mutationType": {
        "name": "CustomerMutation"
      },
      "types": [
        {
          "name": "CustomerQuery",
          "fields": [
            {
              "name": "findings_view",
              "type": {
                "name": "PlainFindingsViewConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_findings_view",
              "type": {
                "name": "PlainActualFindingsModelConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_hierarchy",
              "type": {
                "name": "ScopeHierarchy",
                "kind": "OBJECT"
              }
            },
            {
              "name": "summary",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_filters",
              "type": {
                "name": "FindingFilterConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "PlainFindingsViewConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PageInfo",
          "fields": [
            {
              "name": "hasNextPage",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "hasPreviousPage",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "startCursor",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "endCursor",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Boolean",
          "fields": null
        },
        {
          "name": "String",
          "fields": null
        },
        {
          "name": "PlainFindingsViewEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "FindingsView",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingsView",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tickets",
              "type": {
                "name": "TicketsConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "datasource_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregated_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "open_aggregated_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation_sub_phase",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_email",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "FindingAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Int",
          "fields": null
        },
        {
          "name": "Float",
          "fields": null
        },
        {
          "name": "FindingScore",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalized_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scoring_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "factorized_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score_set_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "user_score_updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scoring_rule",
              "type": {
                "name": "ScoringRule",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ID",
          "fields": null
        },
        {
          "name": "DateTime",
          "fields": null
        },
        {
          "name": "ScoringRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "method",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "reduction_factor",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fixed_value",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "priority",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "Node",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleMethods",
          "fields": null
        },
        {
          "name": "SelectionRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filtersid",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scopesid",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scope_group",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_group_model",
              "type": {
                "name": "ScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scoring_rules",
              "type": {
                "name": "ScoringRuleConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_preferences",
              "type": {
                "name": "SLAPreferenceConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_sla_preferences",
              "type": {
                "name": "TicketSLARuleConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "FindingFilter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_type",
              "type": {
                "name": "FindingFilterTypeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "popular",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "JSONString",
          "fields": null
        },
        {
          "name": "FindingFilterTypeEnum",
          "fields": null
        },
        {
          "name": "ScopeGroup",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "root",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileConnectedScopeGroupRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "group_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScoringRuleEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ScoringRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreferenceConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreferenceEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "SLAPreference",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SLAPreference",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filtersid",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scopesid",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_respond",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "group",
              "type": {
                "name": "SLAGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "SLAGroup",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "User",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "first_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "email",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "identity_provider_source",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_login",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "activity_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "saml_groups_from_last_login",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "username",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_access_groups",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_events",
              "type": {
                "name": "SystemEventConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "saml_group_profiles",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "UserNodePermissionNodes",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "saml_group_profiles",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "Role",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "saml_user_groups",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "number_of_users",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_login_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Profile",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Profile",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "saml_user_groups",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "scopes_editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "scope_groups",
              "type": {
                "name": "ScopeGroupConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scopes",
              "type": {
                "name": "FindingFilterConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "statuses",
              "type": {
                "name": "StatusConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "users",
              "type": {
                "name": "ProfileUserConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ProfileNodeRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "users",
              "type": {
                "name": "ProfileUserConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_groups",
              "type": {
                "name": "ScopeGroupConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ProfileUserConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUserEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ProfileUser",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUser",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "first_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "email",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "identity_provider_source",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_login",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "activity_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "role_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "saml_groups_from_last_login",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "username",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "role",
              "type": {
                "name": "Role",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope_access_groups",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_events",
              "type": {
                "name": "SystemEventConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ProfileUserRelay",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "IdentityProviderSource",
          "fields": null
        },
        {
          "name": "UserActivityStatus",
          "fields": null
        },
        {
          "name": "RemediationQueueActivityRecord",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "timestamp",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "entity_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "attribute",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "old_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "new_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_event_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "AuditRecordReasonEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_record",
              "type": {
                "name": "AuditRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "action",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "details",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "RemediationQueueActivityRecordNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_record",
              "type": {
                "name": "AuditRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "action",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "details",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Ticket",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_endpoint_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_close",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_reopen",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "assignee",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sprint",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sync_attachments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_attachment_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_status_update_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_remaining_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_mapping",
              "type": {
                "name": "FieldMapping",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "duedate",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketStatusEnum",
          "fields": null
        },
        {
          "name": "FieldMappingDefinition",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "keys",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "column_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "internal_to_external_status_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_to_internal_status_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "webhook_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "EndpointType",
                "kind": "ENUM"
              }
            },
            {
              "name": "manager_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketProvider",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "known_identifier",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_identifier",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "oauth_client_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "webhook_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_installed",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "change_status_allowed",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "instructions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "configuration",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "display",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_internal",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketProviderTypeEnum",
          "fields": null
        },
        {
          "name": "Instruction",
          "fields": [
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "link_text",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "EndpointType",
          "fields": null
        },
        {
          "name": "FieldMapping",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "value_mapping",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_favorite",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aligned_to_default",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AuditRecord",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "timestamp",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "entity_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "attribute",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "old_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "new_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_event_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "AuditRecordReasonEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "visible",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_event",
              "type": {
                "name": "SystemEvent",
                "kind": "OBJECT"
              }
            },
            {
              "name": "entity_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "entity_exists",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "old_value_object",
              "type": {
                "name": "ExtendedAuditValue",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_value_object",
              "type": {
                "name": "ExtendedAuditValue",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "UserType",
          "fields": null
        },
        {
          "name": "AuditRecordReasonEnum",
          "fields": null
        },
        {
          "name": "SystemEvent",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "system_event_definition_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "parameters",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "creating_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "NodeIntId",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ExtendedAuditValue",
          "fields": [
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "display",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "duration",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SystemEventConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "SystemEventEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "SystemEvent",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ProfileUserSortEnum",
          "fields": null
        },
        {
          "name": "ScopeGroupConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScopeGroupEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "ScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "ScopeGroupSortEnum",
          "fields": null
        },
        {
          "name": "FindingFilterConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingFilterEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "StatusConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "StatusEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Status",
          "fields": [
            {
              "name": "key",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "StatusCategoryEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "sub_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "StatusTypeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_extended",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by_user_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "updated_by_user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            },
            {
              "name": "profiles",
              "type": {
                "name": "ProfileConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "StatusCategoryEnum",
          "fields": null
        },
        {
          "name": "StatusTypeEnum",
          "fields": null
        },
        {
          "name": "ProfileSortEnum",
          "fields": null
        },
        {
          "name": "ProfileAndSAMLGroupObject",
          "fields": [
            {
              "name": "saml_group",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "profile",
              "type": {
                "name": "Profile",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "TicketSLARuleConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketSLARuleEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "TicketSLARule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketSLARule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_respond",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "selection_rule",
              "type": {
                "name": "SelectionRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user",
              "type": {
                "name": "User",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "StatusType",
          "fields": [
            {
              "name": "key",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Datasource",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definitions_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "integration_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required_fields_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "secret_configuration_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "deleted",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_received_finding",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_check_connection_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "check_connection_status",
              "type": {
                "name": "DatasourceCheckConnectionStatusEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "has_link",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_comments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cron",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definition",
              "type": {
                "name": "DatasourceDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "collection_state",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collection_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rap_instance_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "days_not_seen_to_declare_fixed",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_collected_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_reported_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "secrets_hints",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "DatasourceCheckConnectionStatusEnum",
          "fields": null
        },
        {
          "name": "DatasourceDefinition",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "instructions",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required_fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "secret_configuration",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_check_connection",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sections",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "source_display_name",
              "type": {
                "name": "SourceDisplayName",
                "kind": "OBJECT"
              }
            },
            {
              "name": "filters",
              "type": {
                "name": "FiltersConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_received_finding",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_rapable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_collected_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_last_collected_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enable_last_reported_threshold",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_last_reported_threshold",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Section",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_collapsable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Row",
          "fields": [
            {
              "name": "fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FieldInput",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_string_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_input_type",
              "type": {
                "name": "FieldTypesEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Options",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "query_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "hidden",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_multi",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "skeleton",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_primary",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "descendants",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "precedents",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "field_input_size",
              "type": {
                "name": "FieldSizeEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "mapping_data",
              "type": {
                "name": "MappingData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "label_right",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "min_value",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "max_value",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FieldTypesEnum",
          "fields": null
        },
        {
          "name": "Options",
          "fields": [
            {
              "name": "is_createable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_creatable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "switch_cases",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "KeyValuePair",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "Case",
          "fields": [
            {
              "name": "label",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FieldSizeEnum",
          "fields": null
        },
        {
          "name": "MappingData",
          "fields": [
            {
              "name": "columns",
              "type": {
                "name": "MapperColumn",
                "kind": "OBJECT"
              }
            },
            {
              "name": "rows",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "MapperColumn",
          "fields": [
            {
              "name": "field_from",
              "type": {
                "name": "MapperColumnField",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_to",
              "type": {
                "name": "MapperColumnField",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "MapperColumnField",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "MapperRow",
          "fields": [
            {
              "name": "field_from",
              "type": {
                "name": "MapperRowField",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_to",
              "type": {
                "name": "MapperRowField",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "MapperRowField",
          "fields": [
            {
              "name": "display_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "icon",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_string_value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "default_value",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_input_type",
              "type": {
                "name": "FieldTypesEnum",
                "kind": "ENUM"
              }
            },
            {
              "name": "options",
              "type": {
                "name": "Options",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "query_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "required",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "hidden",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_multi",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "skeleton",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_primary",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tooltip",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SourceDisplayName",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FiltersConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FiltersEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Filter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Filter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "ID",
                "kind": "SCALAR"
              }
            },
            {
              "name": "value",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tree",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definitions_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "TicketsConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketsEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "TicketNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "ticket_endpoint_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_provider_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_mapping_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "external_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "external_status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "status",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_close",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "failed_to_reopen",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "assignee",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sprint",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sync_attachments",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_attachment_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_status_update_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_remaining_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "field_mapping_definition",
              "type": {
                "name": "FieldMappingDefinition",
                "kind": "OBJECT"
              }
            },
            {
              "name": "field_mapping",
              "type": {
                "name": "FieldMapping",
                "kind": "OBJECT"
              }
            },
            {
              "name": "ticket_provider",
              "type": {
                "name": "TicketProvider",
                "kind": "OBJECT"
              }
            },
            {
              "name": "remediation_queue_title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_assignee_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingAdditionalData",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cve",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cwe",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "FiltersConfigInput",
          "fields": null
        },
        {
          "name": "FindingsViewSortEnum",
          "fields": null
        },
        {
          "name": "PlainActualFindingsModelConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsModelEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "PlainActualFindingsView",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsView",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "StatusType",
                "kind": "OBJECT"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "datasource_tags_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by_remediation_queue_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "owner_email",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "FindingAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainActualFindingsViewSortEnum",
          "fields": null
        },
        {
          "name": "Finding",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "datasource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "title",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "source",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "discovered_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "due_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_reported_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "time_to_remediate",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sub_category",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_reported_not_exist",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_group_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "package_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "image_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "scan_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "editable",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "reopen_date",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_type_str",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_vendor_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_subtype",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "rule_family",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "closing_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "meta",
              "type": {
                "name": "FindingMetadata",
                "kind": "OBJECT"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tickets",
              "type": {
                "name": "TicketConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "comments",
              "type": {
                "name": "CommentConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "aggregation_group",
              "type": {
                "name": "AggregationGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "findings_additional_data",
              "type": {
                "name": "FindingsAdditionalData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "attachments",
              "type": {
                "name": "AttachmentConnection",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_preference",
              "type": {
                "name": "SLAPreference",
                "kind": "OBJECT"
              }
            },
            {
              "name": "audit_records",
              "type": {
                "name": "RemediationQueueActivityRecord",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "seem_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "manual_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "name": "FindingDynamicData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "main_resource",
              "type": {
                "name": "PlainResourceNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "raw2",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_raw",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "system_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "user_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "actual_status",
              "type": {
                "name": "Status",
                "kind": "OBJECT"
              }
            },
            {
              "name": "tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remediation",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "additional_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "seem_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "manual_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource_tags",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "file_prefix",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "dynamic",
              "type": {
                "name": "FindingDynamicData",
                "kind": "OBJECT"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "severity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding_score",
              "type": {
                "name": "FindingScore",
                "kind": "OBJECT"
              }
            },
            {
              "name": "sla_remaining_time",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sla_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "ticket_due_date_status",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "datasource",
              "type": {
                "name": "Datasource",
                "kind": "OBJECT"
              }
            },
            {
              "name": "age",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource",
              "type": {
                "name": "PlainResourceNode",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "raw2",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_raw",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_collected_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingDynamicData",
          "fields": [
            {
              "name": "link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "comments",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DatasourceComment",
          "fields": [
            {
              "name": "body",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "PlainResourceNode",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "uuid",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "r1_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r1_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r1_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r2_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r3_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "r4_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_provider",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "cloud_account",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cloud_account_friendly_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tags_values",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "seem_tags_values",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "tags_key_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "seem_tags_key_values",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "last_seen",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "first_seen",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "critical_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_type",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingMetadata",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalizer_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "collection_service_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "normalized_file",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "collected_file",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "enrichment_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "TicketConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TicketEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Ticket",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "CommentConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "CommentEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Comment",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Comment",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "body",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_modified",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "AggregationGroup",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aggregation_rule_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "main_finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "open_findings_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resource_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_locked",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_identifier",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_rule",
              "type": {
                "name": "AggregationRule",
                "kind": "OBJECT"
              }
            },
            {
              "name": "main_finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "findings",
              "type": {
                "name": "FindingConnection",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AggregationRule",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "order",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "aggregation_query",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "field_calculation",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "disabled",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "version",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "last_successful_run",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "last_number_of_generated_groups",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "created_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "updated_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "customer_description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "internal_description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "aggregation_rule_definition_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "findings_amount_before_aggregation",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter",
              "type": {
                "name": "AggregationFilter",
                "kind": "OBJECT"
              }
            },
            {
              "name": "scope",
              "type": {
                "name": "AggregationFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "AggregationRuleType",
          "fields": null
        },
        {
          "name": "AggregationFilter",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "filter_data",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "total_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "edge_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "FindingEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "FindingSortEnum",
          "fields": null
        },
        {
          "name": "FindingsAdditionalData",
          "fields": [
            {
              "name": "finding_id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "original_finding_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "engines",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cve",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "cwe",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "epss_percentile",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fixed_versions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "vulnerable_versions",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "scanner",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "product",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "package",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "package_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "plugin_text",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "contributers",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "file_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "publication_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "line",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "length",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "method",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "branch",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "project_name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "sink_node",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_public",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "operating_system",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "has_exploit",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "result",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "resolution_reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "detailed_version",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_fixable",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "exploit_maturity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cisa_kev",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "remote_code_execution",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "original_severity",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v3_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v3_vector",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v2_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "cvss_v2_temporal_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "tenable_severity_score",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "vulnerability_reported_date",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "repository_link",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "url",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "main_finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "is_duplicated",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "vulncheck_kev",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fix_extra_identifiers",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "locations",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "epss_score",
              "type": {
                "name": "Float",
                "kind": "SCALAR"
              }
            },
            {
              "name": "traceable_detection_type",
              "type": {
                "name": "TraceableDetectionType",
                "kind": "ENUM"
              }
            },
            {
              "name": "critical_assets_at_risk",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "choke_points",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "affected_entities",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "attack_complexity",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "malware_kit_count",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "prettify",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "TraceableDetectionType",
          "fields": null
        },
        {
          "name": "AttachmentConnection",
          "fields": [
            {
              "name": "pageInfo",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "edges",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "AttachmentEdge",
          "fields": [
            {
              "name": "node",
              "type": {
                "name": "Attachment",
                "kind": "OBJECT"
              }
            },
            {
              "name": "cursor",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "Attachment",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "finding_id",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "uploaded_by",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "key",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "size",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            },
            {
              "name": "creation_time",
              "type": {
                "name": "DateTime",
                "kind": "SCALAR"
              }
            },
            {
              "name": "synced_to_ticket",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "finding",
              "type": {
                "name": "Finding",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "ScopeHierarchy",
          "fields": [
            {
              "name": "scope_hierarchy",
              "type": {
                "name": "JSONString",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "SummaryAPIS",
          "fields": null
        },
        {
          "name": "AggregateFunctions",
          "fields": null
        },
        {
          "name": "RoundFunctions",
          "fields": null
        },
        {
          "name": "FindingFilterFilter",
          "fields": null
        },
        {
          "name": "FindingFilterSortEnum",
          "fields": null
        },
        {
          "name": "CustomerMutation",
          "fields": [
            {
              "name": "new_finding_scope_v2",
              "type": {
                "name": "NewFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_scope_v2",
              "type": {
                "name": "UpdateFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_scope_v2",
              "type": {
                "name": "DeleteFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "create_scope_group",
              "type": {
                "name": "CreateScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "edit_scope_group",
              "type": {
                "name": "EditScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_scope_group",
              "type": {
                "name": "DeleteScopeGroup",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_finding_filter",
              "type": {
                "name": "NewFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_filter",
              "type": {
                "name": "UpdateFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_filter",
              "type": {
                "name": "DeleteFindingFilterV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "new_finding_scope",
              "type": {
                "name": "NewFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "update_finding_scope",
              "type": {
                "name": "UpdateFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "delete_finding_scope",
              "type": {
                "name": "DeleteFindingScopeV2",
                "kind": "OBJECT"
              }
            },
            {
              "name": "add_manual_findings",
              "type": {
                "name": "ManualFindings",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "NewFindingScopeV2",
          "fields": [
            {
              "name": "finding_filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "FindingFilterInput",
          "fields": null
        },
        {
          "name": "UpdateFindingScopeV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteFindingScopeV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "CreateScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "group_id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "EditScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteScopeGroup",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "NewFindingFilterV2",
          "fields": [
            {
              "name": "finding_filter",
              "type": {
                "name": "FindingFilter",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "UpdateFindingFilterV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "effected_queues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "DeleteFindingFilterV2",
          "fields": [
            {
              "name": "ok",
              "type": {
                "name": "Boolean",
                "kind": "SCALAR"
              }
            },
            {
              "name": "reason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ManualFindings",
          "fields": [
            {
              "name": "findings",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            }
          ]
        },
        {
          "name": "AddManualFindingResult",
          "fields": [
            {
              "name": "id",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "id_int",
              "type": {
                "name": "Int",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "ManualFindingInput",
          "fields": null
        },
        {
          "name": "RemediationInput",
          "fields": null
        },
        {
          "name": "ManualResourceInput",
          "fields": null
        },
        {
          "name": "__Schema",
          "fields": [
            {
              "name": "types",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "queryType",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "mutationType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            },
            {
              "name": "subscriptionType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            },
            {
              "name": "directives",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "__Type",
          "fields": [
            {
              "name": "kind",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "name",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "fields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "interfaces",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "possibleTypes",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "enumValues",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "inputFields",
              "type": {
                "name": null,
                "kind": "LIST"
              }
            },
            {
              "name": "ofType",
              "type": {
                "name": "__Type",
                "kind": "OBJECT"
              }
            }
          ]
        },
        {
          "name": "__TypeKind",
          "fields": null
        },
        {
          "name": "__Field",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "args",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "isDeprecated",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "deprecationReason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__InputValue",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "type",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "defaultValue",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__EnumValue",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "isDeprecated",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "deprecationReason",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            }
          ]
        },
        {
          "name": "__Directive",
          "fields": [
            {
              "name": "name",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "description",
              "type": {
                "name": "String",
                "kind": "SCALAR"
              }
            },
            {
              "name": "locations",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            },
            {
              "name": "args",
              "type": {
                "name": null,
                "kind": "NON_NULL"
              }
            }
          ]
        },
        {
          "name": "__DirectiveLocation",
          "fields": null
        }
      ]
    }
  }
}
```
and this is a snippet of the output of the scope_hierarchy specific schema:
```
  "data": {
    "scope_hierarchy": {
      "scope_hierarchy": "[{\"type\": \"root\", \"id\": \"U2NvcGVHcm91cDox\", \"name\": \"COMPANY\", \"editable\": false, \"created_by\": null, \"children\":
```

What I need to do,  is pull al the findings for a specific scope. Can you see a way to do this?

----------------------------------------------------------------------------------------------------
AI: To pull all the findings for a specific scope, you'll need to determine a relationship between the scopes defined in the `scope_hierarchy` and the finding entities. This relationship usually involves using some sort of `id` from the `scope_hierarchy` to filter findings.

Here's a structured approach to achieve this:

### Step 1: Identify the Scope ID
From your obtained `scope_hierarchy`, each scope, including a "root" and its `children`, has an `id`. This `id` is what you'll use to filter findings related to that particular scope.

### Step 2: Query Findings by Scope ID
If your GraphQL API supports finding retrieval by scope ID, you need to find the exact field or argument in the schema to filter findings. In most cases, you can apply a filter directly in the query by passing the `scope_id`.

Let's say you pass the scope ID as a variable to query findings:

```python
def fetch_findings_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsByScope($scopeId: ID!) {
                findings(scopeId: $scopeId) {
                    id
                    title
                    severity
                    discovered_time
                    resource_name
                    datasource {
                        friendly_name
                    }
                    # Include other fields you are interested in
                }
            }
        ''',
        'variables': {'scopeId': scope_id}
    }

    try:
        logging.info(f"Fetching findings for scope ID: {scope_id}")
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            logging.info("Successfully retrieved findings.")
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")

# Example use:
# You need to first identify the 'scope_id' from your scope hierarchy and then call this function
scope_id = "U2NvcGVHcm91cDox"  # Replace with the desired scope ID
findings = fetch_findings_by_scope(token, scope_id)
if findings:
    print(json.dumps(findings, indent=2))
```

### Important:
- **Check the Schema for Filtering**: Ensure that the GraphQL endpoint supports filtering findings by scope. This might require a look at the `findings` type and its arguments in your schema. Adjust the query accordingly.
  
- **Parsing Response**: Once you have the response, parse through it to extract and utilize findings data for your application logic.

- **Handling Hierarchy**: If you want findings for all nested scopes under a root, ensure your query or subsequent processing accounts for this. You might need to recursively fetch or aggregate IDs of nested children.

### Adjustments:
In case there's a different approach for binding scopes to findings (e.g., through tagging or another object in your schema), ensure to adjust the query structure based on that logic.

### Summary:
This setup is contingent on your GraphQL API allowing such queries. If `findings` cannot be directly filtered using a `scopeId`, you may need to explore how findings correlate with scopes in your schema or application design documentation.
----------------------------------------------------------------------------------------------------
User: Can you give me the full script code?

----------------------------------------------------------------------------------------------------
AI: Certainly! Below is the complete Python script that includes functions to authenticate, retrieve the scope hierarchy, and then query findings by a specific scope ID. This script uses the `requests` library, assumes environment variables are configured for authentication, and handles JSON responses.

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            return json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsByScope($scopeId: ID!) {
                findings(scopeId: $scopeId) {
                    id
                    title
                    severity
                    discovered_time
                    resource_name
                    datasource {
                        friendly_name
                    }
                }
            }
        ''',
        'variables': {'scopeId': scope_id}
    }

    try:
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Step 1: Fetch scope hierarchy
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example of selecting a scope_id, modify as needed
    scope_id = "U2NvcGVHcm91cDox"  # Replace with the actual scope ID you wish to query
    logging.info(f"Using scope id: {scope_id}")

    # Step 2: Fetch findings for the specific scope
    findings = fetch_findings_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

### Key Points:

1. **Environment Setup**: Ensure your `.env` file includes the `API_KEY` used for authentication with Cognito.
  
2. **Token Management**: The script fetches a Bearer token required for authenticated GraphQL queries.

3. **Scope Hierarchy and Findings**: 
   - It first fetches the entire scope hierarchy. 
   - Using an example scope ID, it queries findings associated with that scope.

4. **Error Handling**: Various `try-except` blocks ensure that errors during API calls are captured and logged.

5. **Customization**:
   - You should adjust the `scope_id` or modify how you determine which scope to query based on your specific requirements.
   
Remember, this example assumes the `findings` query supports filtering by `scopeId`. If this filter isn't directly possible, you'll need to adjust your approach based on your API's design. Please replace placeholder values for `scopeId` with actual IDs from your `scope_hierarchy` data.
----------------------------------------------------------------------------------------------------
User: I receive the following output (it fails):
```
2024-11-11 13:34:17,814 - DEBUG - Starting new HTTPS connection (1): cognito-idp.us-east-2.amazonaws.com:443
2024-11-11 13:34:18,193 - DEBUG - https://cognito-idp.us-east-2.amazonaws.com:443 "POST / HTTP/11" 200 4727
2024-11-11 13:34:18,193 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:34:18,496 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 200 22478
2024-11-11 13:34:18,507 - INFO - Using scope id: U2NvcGVHcm91cDox
2024-11-11 13:34:18,507 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:34:18,720 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 400 190
2024-11-11 13:34:18,720 - ERROR - Failed to access API, status code: 400
2024-11-11 13:34:18,720 - ERROR - Response content: {"errors":[{"message":"Cannot query field \"findings\" on type \"CustomerQuery\". Did you mean \"finding\", \"findings_view\" or \"finding_filters\"?","locations":[{"line":3,"column":17}]}]}
2024-11-11 13:34:18,721 - ERROR - Failed to retrieve findings.
```
I took a look at the "findings_view" argument that error mentions, and in the documentation it looks like this:
```
findings_view
Query
Arguments
#
after
String

before
String

filters_config
FiltersConfigInput

first
Int

last
Int

sort
[FindingsViewSortEnum]

Response
#
Returns PlainFindingsViewConnection.
```

I noticed one of the arguments there is "filters_config", so I opened that up as well to see the documentation there. Here is what I found:
```
FiltersConfigInput 
Input Object
Fields
#
filters_fields_to_exclude 
[String]

Fields to exclude in the finding's filter.

filters_fields_to_include 
[String]

Fields to include in the finding's filter.

filters_fields_to_override 
[String]

Fields to override in the finding's filter.

filtersid 
String

The finding's filter ID.

filtersjson 
String

scopes_fields_to_exclude 
[String]

Fields to exclude in the finding's scope.

scopes_fields_to_include 
[String]

Fields to include in the finding's scope.

scopes_fields_to_override 
[String]

Fields to override in the finding's scope.

scopesid 
String

The finding's scope ID.

scopesjson 
String

Usages
#
References
#
Argument filters_config of field findings_view from type CustomerQuery
Argument filters_config of field summary from type CustomerQuery
```

Could this be what we're looking for?

----------------------------------------------------------------------------------------------------
AI: Yes, the error message and documentation you've shared provide valuable insights into how you can structure your query to retrieve findings for a specific scope. The correct approach involves using the `findings_view` query, which utilizes a `filters_config` argument. Specifically, you can use the `scopesid` field within `FiltersConfigInput` to filter findings by a particular scope.

Let's construct the query to access findings using this method:

### Updated Script

Below is the modified script to use the `findings_view` query with the appropriate `filters_config`, specifying `scopesid` to filter findings by scope:

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
                           'Content-Type': 'application/x-amz-json-1.1'}

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            return json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_view_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    try:
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            return response.json()
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Step 1: Fetch scope hierarchy
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example of selecting a scope_id, modify as needed
    scope_id = "U2NvcGVHcm91cDox"  # Replace with the actual scope ID you wish to query
    logging.info(f"Using scope id: {scope_id}")

    # Step 2: Fetch findings for the specific scope using findings_view
    findings = fetch_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

### Key Details:
- **Token Management and Error Handling**: These remain largely unchanged, ensuring that a valid token is retrieved for authorization.
- **Scope Hierarchy**: The function fetches available scopes to identify the correct `scope_id`.
- **Findings View Query**: The `filters_config` argument leverages `scopesid` to filter findings by scope ID.
- **Query Update**: The query now accesses `findings_view`, which is structured to handle scope filtering through a `FiltersConfigInput`.

Ensure to replace `scope_id` with the actual ID of the scope you wish to query, and customize any logging or response handling as necessary.
----------------------------------------------------------------------------------------------------
User: All I get is this and it gets stuck:
```
2024-11-11 13:40:57,902 - DEBUG - Starting new HTTPS connection (1): cognito-idp.us-east-2.amazonaws.com:443
2024-11-11 13:40:58,278 - DEBUG - https://cognito-idp.us-east-2.amazonaws.com:443 "POST / HTTP/11" 200 4727
2024-11-11 13:40:58,280 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:40:58,636 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 200 22478
2024-11-11 13:40:58,636 - INFO - Using scope id: U2NvcGVHcm91cDoxMw==
2024-11-11 13:40:58,636 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
```

Also, can you edit the logging config to save to a specific directory?

----------------------------------------------------------------------------------------------------
AI: Certainly! If the script seems to be getting stuck, it could be an issue with how responses are handled or with waiting for the API call to complete. The script making an HTTPS request to your endpoint completes successfully as per the logs you’ve shared. However, if it appears to be stuck, it could be waiting for a large response or possibly not receiving a response due to network issues or server limitations. We'll also update the logging configuration to save the log output to a specific directory.

Here’s an updated version with logging directed to a file, and additional debug information to help diagnose any issues:

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging to file
log_directory = r"C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work"
log_file_path = os.path.join(log_directory, "api_script.log")

logging.basicConfig(
    filename=log_file_path,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {
            'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
            'Content-Type': 'application/x-amz-json-1.1'
        }

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            logging.info("Successfully retrieved the access token.")
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            logging.error(f"Response content: {cognito_response.content.decode()}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                logging.info("Successfully retrieved the scope hierarchy.")
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure in scope hierarchy fetch.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_view_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    try:
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            response_json = response.json()
            logging.info(f"Successfully retrieved findings for scope {scope_id}")
            return response_json
        else:
            logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Fetch scope hierarchy to identify scope ID
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example: Select the first scope, modify logic as needed
    scope_id = "U2NvcGVHcm91cDoxMw=="  # Replace with actual scope ID
    logging.info(f"Using scope ID: {scope_id}")

    # Fetch findings for the specified scope
    findings = fetch_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

### Key Updates:
- **Logging to File**: The log output is now saved to a file at the specified path to help trace execution.
- **Error Diagnosis**: Added additional logging for HTTP response content to better diagnose why the script might appear to hang (e.g., network latency, large response sizes).
- **Example Scope ID**: Ensure this ID (`"U2NvcGVHcm91cDoxMw=="`) is correctly obtained from your applications' logic or data sources.

### Further Troubleshooting:
- **Check Network and Latency**: Ensure no network issues that might be contributing to perceived “hang”.
- **API Rate or Limit Issues**: Confirm if there are rate limits on requests that might slow down or block responses.
- **Scope ID Validity**: Verify the selected `scope_id` is intended for use as an input for `findings_view`.
- **Large Data Handling**: If response data is large, consider paginating results or extracting only essential data to reduce processing delays.
----------------------------------------------------------------------------------------------------
User: Actually, it became unstuck and returned the following. Note that I did implement your revised code you just provided, however I'm wondering if the full response affects what changes need to be made to the code?

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging to file
log_directory = r"C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work\\Seemplicity API Scripts"
log_file_path = os.path.join(log_directory, "api_script.log")

logging.basicConfig(
    filename=log_file_path,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {
            'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
            'Content-Type': 'application/x-amz-json-1.1'
        }

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            logging.info("Successfully retrieved the access token.")
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            logging.error(f"Response content: {cognito_response.content.decode()}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                logging.info("Successfully retrieved the scope hierarchy.")
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure in scope hierarchy fetch.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_view_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    try:
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            response_json = response.json()
            logging.info(f"Successfully retrieved findings for scope {scope_id}")
            return response_json
        else:
            logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Fetch scope hierarchy to identify scope ID
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example: Select the first scope, modify logic as needed
    scope_id = "U2NvcGVHcm91cDoxMw=="  # Replace with actual scope ID
    logging.info(f"Using scope ID: {scope_id}")

    # Fetch findings for the specified scope
    findings = fetch_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

----------------------------------------------------------------------------------------------------
AI: Glad to hear that the script is no longer stuck and is making successful requests! Based on what you've described, it seems like the script successfully retrieves data based on the scope hierarchy and findings view. Let's go over the potential adjustments or enhancements you might consider:

### Review of Current Functionality

1. **Environment and Directory Paths**: Make sure the log directory is accessible and correctly formatted to ensure the log file can be written without issues.
2. **Scope ID Validity**: Double-check that the `scope_id` you are using (`"U2NvcGVHcm91cDoxMw=="`) is correct and matches the desired scope you wish to query. It should be base64-encoded, which is commonly used for such IDs.
3. **Logging**: The script now logs interactions and any error states to a file as expected. Ensure these logs are sufficient for debugging.
4. **Output Verification**: The `findings` data will be printed out in the log. Make sure this data looks as expected. You can refine output handling if more detailed data operations are needed.

### Potential Enhancements and Checks

1. **Pagination Handling**: If `findings_view` supports pagination and you're getting a partial result, consider adding pagination logic to fetch complete data if the API provides `pageInfo` with `endCursor`.

2. **Error Handling**: Ensure the script gracefully handles unexpected responses, by perhaps adding more nuanced checks on response keys before processing data.

3. **Scope Traversal**: If your use case involves querying findings for multiple scopes or traversing nested children, consider implementing logic to iterate over `scope_hierarchy` and fetch data for each relevant scope.

4. **Performance Improvements**: If responses are large and you need only specific fields, refine your GraphQL query further to exclude unneeded data.

5. **Security & Tokens**: If dealing with sensitive data or long-lived scripts, consider how you manage tokens, such as implementing token refresh logic if required by your identity provider.

### Example Adjustments for Pagination (Assuming API Support):

If `findings_view` results are paginated:

```python
def fetch_all_findings_view_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }

    all_findings = []
    has_next_page = True
    after_cursor = None

    while has_next_page:
        variables = {'filtersConfig': {'scopesid': scope_id, 'after': after_cursor}}
        data = {
            'query': '''
                query getFindingsView($filtersConfig: FiltersConfigInput) {
                    findings_view(filters_config: $filtersConfig) {
                        pageInfo {
                            endCursor
                            hasNextPage
                        }
                        edges {
                            node {
                                id
                                title
                                severity
                                discovered_time
                                resource_name
                                datasource {
                                    friendly_name
                                }
                            }
                        }
                    }
                }
            ''',
            'variables': variables
        }

        response = requests.post(url, headers=headers, json=data)
        response_json = response.json()
        
        if response.status_code == 200:
            findings_data = response_json.get("data", {}).get("findings_view", {})
            all_findings.extend(findings_data.get("edges", []))
            has_next_page = findings_data.get("pageInfo", {}).get("hasNextPage", False)
            after_cursor = findings_data.get("pageInfo", {}).get("endCursor")
        else:
            logging.error(f"Error fetching findings: {response.status_code}")
            return None

    return all_findings
```

Add this into your `main` function if needed, updating how findings are processed. 

With these adjustments and observations, you should continue to refine the approach to align closely with your specific data needs and API behavior.
----------------------------------------------------------------------------------------------------
User: Apologies, take a step back. I meant to provide the full terminal output and my current code along with my previous question.

Terminal Output:
```
2024-11-11 13:40:57,902 - DEBUG - Starting new HTTPS connection (1): cognito-idp.us-east-2.amazonaws.com:443
2024-11-11 13:40:58,278 - DEBUG - https://cognito-idp.us-east-2.amazonaws.com:443 "POST / HTTP/11" 200 4727
2024-11-11 13:40:58,280 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:40:58,636 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 200 22478
2024-11-11 13:40:58,636 - INFO - Using scope id: U2NvcGVHcm91cDoxMw==
2024-11-11 13:40:58,636 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:42:38,436 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 502 122
2024-11-11 13:42:38,437 - ERROR - Failed to access API, status code: 502
2024-11-11 13:42:38,438 - ERROR - Response content: <html>
<head><title>502 Bad Gateway</title></head>
<body>
<center><h1>502 Bad Gateway</h1></center>
</body>
</html>

2024-11-11 13:42:38,439 - ERROR - Failed to retrieve findings.
```

Code:
```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64

# Configure logging to file
log_directory = r"C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work\\Seemplicity API Scripts"
log_file_path = os.path.join(log_directory, "api_script.log")

logging.basicConfig(
    filename=log_file_path,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {
            'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
            'Content-Type': 'application/x-amz-json-1.1'
        }

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            logging.info("Successfully retrieved the access token.")
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            logging.error(f"Response content: {cognito_response.content.decode()}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                logging.info("Successfully retrieved the scope hierarchy.")
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure in scope hierarchy fetch.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_view_by_scope(token: str, scope_id: str):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    try:
        response = requests.post(url, headers=headers, json=data)

        if response.status_code == 200:
            response_json = response.json()
            logging.info(f"Successfully retrieved findings for scope {scope_id}")
            return response_json
        else:
            logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Fetch scope hierarchy to identify scope ID
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example: Select the first scope, modify logic as needed
    scope_id = "U2NvcGVHcm91cDoxMw=="  # Replace with actual scope ID
    logging.info(f"Using scope ID: {scope_id}")

    # Fetch findings for the specified scope
    findings = fetch_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

----------------------------------------------------------------------------------------------------
AI: The `502 Bad Gateway` error indicates that the request reached a server acting as a gateway or proxy, but received an invalid response from the upstream server. Here are some steps you can consider to troubleshoot and potentially resolve this issue:

### Steps to Address the `502 Bad Gateway` Error

1. **Retry Logic**: Network issues or temporary server problems might cause intermittent 502 errors. Implementing a basic retry logic can help determine if the issue persists or is a one-off glitch.

2. **Service Status**: Check if the Seemplicity API or related services you are depending on report any downtime or service interruptions.

3. **API Request Validity**: Double-check your GraphQL query to ensure it complies with the API's expected schemas and formats, especially regarding the structure of the `filters_config`.

4. **Network Logs**: Analyze network logs or utilize tools (like `curl` or Postman) to directly test the API request. This might offer more insights into what part of the request leads to the gateway error.

5. **Query Complexity and Timeout**: Consider simplifying your query if it might be too complex or extensive. Long-running requests might time out and sometimes contribute to proxy errors.

6. **Server Logs**: If you have access, review server-side logs for any errors or insights matching your request attempts.

7. **API Support**: Contact the API provider to confirm whether they are experiencing issues, or to gain insights if certain queries have known limitations or issues.

### Example Code with Retry Logic

Here's an example of how you could implement a simple retry mechanism to handle transient issues:

```python
def fetch_findings_view_by_scope_with_retry(token: str, scope_id: str, max_retries=3):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    for attempt in range(max_retries):
        try:
            response = requests.post(url, headers=headers, json=data)
            if response.status_code == 200:
                response_json = response.json()
                logging.info(f"Successfully retrieved findings for scope {scope_id}")
                return response_json
            elif response.status_code == 502:
                logging.warning(f"502 Bad Gateway encountered. Retrying {attempt + 1} of {max_retries}...")
            else:
                logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
                logging.error(f"Response content: {response.content.decode()}")
                return None
        except requests.exceptions.RequestException as e:
            logging.error(f"Request to Seemplicity API failed: {e}")
            return None

    logging.error("Failed to retrieve findings after maximum retries.")
    return None

# Use in main like this
findings = fetch_findings_view_by_scope_with_retry(token, scope_id)
```

### Further Debugging Ideas

- **Query Parameters**: Ensure all query parameters are correctly specified, especially in `filtersConfig`.
- **Scope ID Validity**: Confirm that `scope_id` used is valid for the Seemplicity dataset.

By following these steps, you can better address the `502 Bad Gateway` error, possibly implementing retries for transient network issues or further isolating specific causes within network infrastructure or application logic.
----------------------------------------------------------------------------------------------------
User: Give me the full revized code with additional debugging.

----------------------------------------------------------------------------------------------------
AI: Certainly! Here's the revised code with additional debugging and a retry mechanism incorporated into the `fetch_findings_view_by_scope` function. This should help in troubleshooting transient issues like the `502 Bad Gateway` error and provide more insights through logging.

```python
import requests
import json
import logging
from dotenv import load_dotenv
import os
import base64
import time

# Configure logging to file
log_directory = r"C:\Users\PolishcV0115\GitHub\Qualys-API-Automation\In Office Work\Seemplicity API Scripts"
log_file_path = os.path.join(log_directory, "api_script.log")

logging.basicConfig(
    filename=log_file_path,
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Load API key from environment variables
load_dotenv()
api_key = os.getenv('API_KEY')

REGION = 'us-east-2'

def get_token(api_key: str) -> str:
    try:
        cognito_data = base64.b64decode(api_key)
        cognito_url = f'https://cognito-idp.{REGION}.amazonaws.com'
        cognito_headers = {
            'X-Amz-Target': 'AWSCognitoIdentityProviderService.InitiateAuth',
            'Content-Type': 'application/x-amz-json-1.1'
        }

        cognito_response = requests.post(cognito_url, headers=cognito_headers, data=cognito_data)
        
        if cognito_response.status_code == 200:
            token = json.loads(cognito_response.content)['AuthenticationResult']['AccessToken']
            logging.info("Successfully retrieved the access token.")
            return token
        else:
            logging.error(f"Failed to get token, status code: {cognito_response.status_code}")
            logging.error(f"Response content: {cognito_response.content.decode()}")
            return None

    except (base64.binascii.Error, requests.exceptions.RequestException) as e:
        logging.error(f"Exception in token retrieval: {e}")
        return None

def fetch_scope_hierarchy(token: str, include_unscoped: bool = False):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getScopeHierarchy($includeUnscoped: Boolean) {
                scope_hierarchy(include_unscoped: $includeUnscoped) {
                    scope_hierarchy
                }
            }
        ''',
        'variables': {'includeUnscoped': include_unscoped}
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        
        if response.status_code == 200:
            response_data = response.json()
            if response_data and "data" in response_data:
                scope_json_str = response_data["data"]["scope_hierarchy"]["scope_hierarchy"]
                logging.info("Successfully retrieved the scope hierarchy.")
                return json.loads(scope_json_str)
            else:
                logging.error("Unexpected response structure in scope hierarchy fetch.")
                return None
        else:
            logging.error(f"Failed to access API, status code: {response.status_code}")
            logging.error(f"Response content: {response.content.decode()}")
            return None

    except requests.exceptions.RequestException as e:
        logging.error(f"Request to Seemplicity API failed: {e}")
        return None

def fetch_findings_view_by_scope(token: str, scope_id: str, max_retries=3):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }
    data = {
        'query': '''
            query getFindingsView($filtersConfig: FiltersConfigInput) {
                findings_view(filters_config: $filtersConfig) {
                    edges {
                        node {
                            id
                            title
                            severity
                            discovered_time
                            resource_name
                            datasource {
                                friendly_name
                            }
                        }
                    }
                    pageInfo {
                        hasNextPage
                        endCursor
                    }
                }
            }
        ''',
        'variables': {'filtersConfig': {'scopesid': scope_id}}
    }

    for attempt in range(max_retries):
        try:
            logging.debug(f"Attempting to fetch findings_view, attempt {attempt + 1}")
            response = requests.post(url, headers=headers, json=data)
            
            if response.status_code == 200:
                response_json = response.json()
                logging.info(f"Successfully retrieved findings for scope {scope_id}")
                return response_json
            
            elif response.status_code == 502:
                logging.warning(f"502 Bad Gateway encountered. Retrying {attempt + 1} of {max_retries}...")
                time.sleep(2 ** attempt)  # Exponential backoff
            
            else:
                logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
                logging.error(f"Response content: {response.content.decode()}")
                return None

        except requests.exceptions.RequestException as e:
            logging.error(f"Request to Seemplicity API failed: {e}")
            return None

    logging.error("Failed to retrieve findings after maximum retries.")
    return None

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    # Fetch scope hierarchy to identify scope ID
    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    # Example: Select a valid scope ID
    scope_id = "U2NvcGVHcm91cDoxMw=="  # Replace with actual scope ID
    logging.info(f"Using scope ID: {scope_id}")

    # Fetch findings for the specified scope with retries
    findings = fetch_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info("Findings retrieved successfully. Process and inspect data below:")
        logging.info(json.dumps(findings, indent=2))
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

### Key Changes and Enhancements:

- **Retry Mechanism**: Added functionality to retry fetching findings in case of a 502 error, using exponential backoff to delay retries progressively.
  
- **Enhanced Debugging**: Logging has been added to monitor each attempt when fetching findings, alongside status code monitoring and response details.

- **Exponential Backoff**: Ensures retries are spaced out, minimizing potential server overload or unnecessary rapid retries.

### Considerations:

- **Network and API Behavior**: Ensure you have network stability, and the API allows frequent requests if your script spans several retries.
  
- **Log Directory Accessibility**: Verify the path set for logging is accessible and writable.
  
- **Response Inspection**: Study the successful responses for any unexpected data patterns so you might adjust your usage logic if necessary.

This setup should help address temporary issues and provide insights into any transitions toward successful executions. If a particular error persists, collaboration with the API provider might yield more details or needed settings adjustments.
----------------------------------------------------------------------------------------------------
User: Here's the full log:

```
2024-11-11 13:49:02,585 - DEBUG - Starting new HTTPS connection (1): cognito-idp.us-east-2.amazonaws.com:443
2024-11-11 13:49:02,957 - DEBUG - https://cognito-idp.us-east-2.amazonaws.com:443 "POST / HTTP/11" 200 4727
2024-11-11 13:49:02,957 - INFO - Successfully retrieved the access token.
2024-11-11 13:49:02,957 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:49:03,423 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 200 22478
2024-11-11 13:49:03,427 - INFO - Successfully retrieved the scope hierarchy.
2024-11-11 13:49:03,429 - INFO - Using scope ID: RmluZGluZ0ZpbHRlcjoyMDc=
2024-11-11 13:49:03,429 - DEBUG - Attempting to fetch findings_view, attempt 1
2024-11-11 13:49:03,430 - DEBUG - Starting new HTTPS connection (1): api.us.seemplicity.io:443
2024-11-11 13:51:03,576 - DEBUG - https://api.us.seemplicity.io:443 "POST /api/v1 HTTP/11" 504 132
2024-11-11 13:51:03,576 - ERROR - Failed to access findings_view API, status code: 504
2024-11-11 13:51:03,576 - ERROR - Response content: <html>

<head><title>504 Gateway Time-out</title></head>

<body>

<center><h1>504 Gateway Time-out</h1></center>

</body>

</html>


2024-11-11 13:51:03,576 - ERROR - Failed to retrieve findings.
```

----------------------------------------------------------------------------------------------------
AI: The `504 Gateway Time-out` error indicates that the server did not receive a timely response from the upstream server it was attempting to contact. This often signals that the request is taking too long to be processed, which could be due to the complexity of the query, server load, or network issues.

Here's an approach to troubleshoot and potentially resolve the `504 Gateway Time-out`:

### Measures and Adjustments:

1. **Optimize Query**:
   - **Simplify the Query**: If possible, reduce the complexity of the query or limit the fields requested to only those necessary.
   - **Consider Pagination**: If the result set could be large, implement pagination to fetch data in smaller chunks, which can reduce processing time on the server.

2. **Increase Server Timeout**:
   - If you have control over server settings, consider increasing the timeout period, though this isn't always feasible for clients consuming third-party APIs.

3. **Network and Load Testing**:
   - Check your network conditions or perform load testing to ensure that your setup can handle peak demand without added latency.

4. **Talk to API Provider**:
   - Check with the Seemplicity API provider if there are known issues or limits, such as request size or rate limiting, and inquire about recommended best practices when dealing with their API.

5. **Debugging and Logging**:
   - Log the specific query sent to ensure it is being constructed as expected.
   - Log additional details about the token, headers, or environment state.

6. **Retries with Delays**:
    - Even though retries were implemented, ensure they're generous enough to accommodate temporary loads on the server.

7. **Separate Long Running Tasks**:
   - If fetching all findings is naturally time-consuming, consider breaking tasks into separate workflows that process smaller data subsets or different endpoints as needed.

Here's how you might adjust the code with pagination if supported by the API:

### Introduce Pagination Example:

```python
def fetch_all_findings_view_by_scope(token: str, scope_id: str, max_retries=3):
    url = 'https://api.us.seemplicity.io/api/v1'
    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }

    all_findings = []
    has_next_page = True
    after_cursor = None

    while has_next_page:
        try:
            logging.info(f"Fetching data with cursor: {after_cursor}")
            variables = {'filtersConfig': {'scopesid': scope_id, 'after': after_cursor}}
            data = {
                'query': '''
                    query getFindingsView($filtersConfig: FiltersConfigInput) {
                        findings_view(filters_config: $filtersConfig) {
                            pageInfo {
                                endCursor
                                hasNextPage
                            }
                            edges {
                                node {
                                    id
                                    title
                                    severity
                                    discovered_time
                                    resource_name
                                    datasource {
                                        friendly_name
                                    }
                                }
                            }
                        }
                    }
                ''',
                'variables': variables
            }

            response = requests.post(url, headers=headers, json=data)
            response_json = response.json()
            
            if response.status_code == 200:
                findings_data = response_json.get("data", {}).get("findings_view", {})
                all_findings.extend(findings_data.get("edges", []))
                page_info = findings_data.get("pageInfo", {})
                has_next_page = page_info.get("hasNextPage", False)
                after_cursor = page_info.get("endCursor")
            
            elif response.status_code == 504:
                logging.warning("504 Gateway Time-out encountered. Retrying...")
            
            else:
                logging.error(f"Failed to access findings_view API, status code: {response.status_code}")
                logging.error(f"Response content: {response.content.decode()}")
                break

        except requests.exceptions.RequestException as e:
            logging.error(f"Request failed: {e}")
            break

    return all_findings

def main():
    if not api_key:
        logging.error("API_KEY environment variable is missing.")
        return

    token = get_token(api_key)
    if not token:
        logging.error("Failed to retrieve the token.")
        return

    scope_hierarchy = fetch_scope_hierarchy(token)
    if not scope_hierarchy:
        logging.error("Failed to retrieve scope hierarchy.")
        return

    scope_id = "RmluZGluZ0ZpbHRlcjoyMDc="  # Ensure this is the correct scope ID
    findings = fetch_all_findings_view_by_scope(token, scope_id)
    if findings:
        logging.info(f"Successfully retrieved {len(findings)} findings.")
    else:
        logging.error("Failed to retrieve findings.")

if __name__ == "__main__":
    main()
```

### Considerations:

- **Cursor Utilization**: If the API supports pagination, `after` in `filtersConfig` can be used with cursor paging to reduce data fetched in each request.
- **API Documentation**: Consult API docs for supported query limits, defaults on pagination, and recommended methods for large dataset handling.
- **Continuous Monitoring**: Regularly test the system's resilience as part of routine checks to improve handling of variable API responses.

By integrating these practices, you can better manage long-running queries and reduce risks associated with timeout errors.
----------------------------------------------------------------------------------------------------
User: Can you give me a summary/prompt that I can provide chatGPT in the future to pick up with diagnosing this issue? Please be detailed and thorough, I want to be able to jump right back in with troubleshooting things. If needed, leave out spaces for me to provide context or info like *insert latest code here* or something like that.

----------------------------------------------------------------------------------------------------
AI: Certainly! Here's a detailed prompt that you can use to re-initiate a conversation with ChatGPT regarding this issue:

---

**Project Context:**
I am working with a Python script that integrates with a GraphQL API from Seemplicity to fetch scope hierarchies and related findings. The script uses `requests` to make HTTPS calls, and authentication is managed via AWS Cognito. The goal is to query findings based on specific scope IDs.

**Current Challenge:**
I'm encountering a `504 Gateway Time-out` error when attempting to retrieve findings via the `findings_view` query. The issue arises despite implementing retries with exponential backoff. I need assistance with troubleshooting and optimizing the operation to successfully make the data query without timeouts.

**Environment:**
- API: Seemplicity GraphQL API
- Authentication: AWS Cognito
- Language: Python
- Key Libraries: `requests`, `dotenv`, `json`, `logging`
- OS/Filesystem Context: *insert relevant info here (e.g., Windows, directory paths)*

**Error Log Extract:**
```plaintext
*Insert relevant parts of latest logged output here, especially displaying the 504 error and any related logs*
```

**Current Code:**
```python
*insert latest version of the script here, including functions and logging setup*
```

**What I Need Help With:**
1. **Diagnosing Causes of 504 Errors:**
   - Identifying possible reasons for the timeout, such as query complexity, API rate limits, or network issues.

2. **Optimizing API Calls:**
   - Suggestions on streamlining the query, potentially through pagination or limiting query fields.

3. **Implementing Robust Error Handling and Retries:**
   - Ensuring that retries are effective and that logging provides enough information for diagnosing issues.

4. **API Query Design:**
   - Ensuring the query structure fits Seemplicity's expectations for handling `findings_view`.

5. **Additional Debugging Suggestions:**
   - Any further thoughts on verifying token validity, header configuration, and correct usage of API parameters.

6. **Discussion of Possible Enhancements:**
   - Recommendations for improving resilience and error recovery in this integration.

*Additional Context:*
Please consider any default behavior or documentation from Seemplicity or AWS Cognito that might help me align more precisely with expected operation parameters.

**End Goal:**
My primary aim is to achieve consistent, efficient data retrieval for the findings under specified scope conditions without encountering gateway errors. Any insights into improving code robustness and reducing latency or server load are valued.

---

This prompt format allows you to effectively engage with ChatGPT in future interactions, ensuring the continuity and depth of context needed to diagnose and troubleshoot efficiently. Tailor the placeholders with the latest logs, code, and observations to harness up-to-date insights from the tool.
----------------------------------------------------------------------------------------------------

